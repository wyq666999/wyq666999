#include <stdio.h>
#include <stdlib.h>
#include <string.h>

# define max_dis 100000

typedef char vextype[20];
typedef struct {
    int N, E;//N是顶点数，E是边数
    int **matrix;//储存邻接矩阵
    vextype *vertex;//存储节点的名字
} Graph;

Graph createGraph(int n);
int FirstNeighbor(Graph G,int v);
int NextNeighbor(Graph G,int v,int w);
int isConnected(Graph g);
void nodeDegree(Graph g, int *node_degree);
int Diameter(Graph g);
int Radius(Graph g);
int dijkstra(Graph g, int start, int end, int *path);
void printPath(int d, int *diameter_path, Graph g);

/**
 * 创建一个节点数为n的图
 * @param n 节点个数
 * @return 返回这个图
 */
Graph createGraph(int n) {
    int i, j;
    Graph g;
    g.N = n;
    g.matrix = (int **) malloc(sizeof(int *) * g.N);
    for (i = 0; i < n; i++) {
        g.matrix[i] = (int *) malloc(sizeof(int) * g.N);
    }
    for (i = 0; i < g.N; i++) {
        for (j = 0; j < g.N; j++) {
            g.matrix[i][j] = max_dis;
        }
    }
    for (i = 0; i < g.N; i++) {
        g.matrix[i][i] = 0;
    }
    g.vertex = (vextype *) malloc(sizeof(vextype) * g.N);
    return g;
}

int FirstNeighbor(Graph G,int v){
    int i=0;
    while(i<G.N){
        if(G.matrix[v][i]<max_dis&&G.matrix[v][i]!=0){
            return i;
        }
        i++;
    }
    return -1; //未找到就是妹有
}
int NextNeighbor(Graph G,int v,int w){
    int i=w+1;
    while(i<G.N){
        if(G.matrix[v][i]<max_dis&&G.matrix[v][i]!=0){
            return i;
        }
        i++;
    }
    return -1; //未找到就是妹有
}
//遍历一个连通子图
void DFS(int v,Graph g,int *visited){

    visited[v]=1;//visit(),访问函数
    for(int w=FirstNeighbor(g,v);w>=0;w=NextNeighbor(g,v,w)){
        if(!visited[w]&&w!=-1)
        DFS(w,g,visited);
    }
}

int isConnected(Graph g) {
    int n=g.N;
    int visited[n];
    for(int i=0;i<n;i++){
        visited[i]=0;
    }
    DFS(0,g,visited);
    for(int i=0;i<n;i++){
        if(visited[i]==0)
        return 0;
    }
    return 1;
}


/**
 * 计算每个点的度
 * @param g 图
 * @param node_degree 将每个点的度写到这个数组中
 */
void nodeDegree(Graph g, int *node_degree) {
    //TODO
    int j, m, count=0;
    for (m = 0; m < g.N; m++)
    {
        for (j = 0; j < g.N; j++)
        {
            if ((g.matrix[m][j] != max_dis)&&(m!=j))
            {
                count++;
            }
        }
        node_degree[m] = count;        //度
        count=0;
    }
}

/**
 * 计算图的直径。提示：Floyd算法
 * @param g 图
 * @return 直径的长度
 */
int Diameter(Graph g) {
    //TODO
    int v, w, u, dis[g.N][g.N];
    for (v = 0; v < g.N; v++)       //复制矩阵
    {
        for (w = 0; w < g.N; w++)
        {
            dis[v][w] = g.matrix[v][w];
        }
    }

    for (u = 0; u < g.N; u++)       //Floyd
    {
        for (v = 0; v < g.N; v++)
        {
            for (w = 0; w < g.N; w++)
            {
                if (dis[v][u] + dis[u][w] < dis[v][w])
                {
                    dis[v][w] = dis[v][u] + dis[u][w];
                }
            }
        }
    }

    int i, j, m, n, max=dis[0][1];
    for (i = 0; i < g.N; i++)
    {
        for (j = i+1; j < g.N; j++)
        {
            if (dis[i][j] > max)
            {
                max = dis[i][j];
                m = i; n = j;
            }
        }
    }

    return dis[m][n];
}

/**
 * 计算图的半径
 * @param g 图
 * @return 半径长度
 */
int Radius(Graph g)
{
    int dis[g.N][g.N];

    for (int i = 0; i < g.N; i++) {
        for (int j = 0; j < g.N; j++) {
            dis[i][j] = g.matrix[i][j];
        }
    }

    for (int i = 0; i < g.N; i++) {         //Floyd
        for (int j = 0; j < g.N; j++) {
            for (int k = 0; k < g.N; k++) {
                if (dis[j][k] > dis[j][i] + dis[i][k]) {
                    dis[j][k] = dis[j][i] + dis[i][k];
                }
            }
        }
    }

    int min = max_dis;
    for (int i = 0; i < g.N; i++) {
        int max = 0;
        for (int j = 0; j < g.N; j++) {
            if (max < dis[i][j]) {
                max = dis[i][j];
            }
        }
        if (min > max) {
            min = max;
        }
    }
    return min;
}

/**
 * 根据距离d和路径数组path输出路径，这样就不需要路径的节点数也能正确输出路径
 * @param d 路径长度
 * @param diameter_path 储存路径的数组
 * @param g 图
 */
void printPath(int d, int *diameter_path, Graph g)
{
    int k = 0;
    int path_length = 0;
    printf("Path: ");
    do {
        printf("%s ", g.vertex[diameter_path[k]]);
        path_length += g.matrix[diameter_path[k]][diameter_path[k + 1]];
        if(d!=0)    k++;
    } while (path_length < d);
    printf("%s", g.vertex[diameter_path[k]]);
}

/**
 * 使用dijkstra算法计算单源最短路径
 * @param g 图
 * @param start 起点
 * @param end 终点
 * @param path 从start到end的路径, [start,...,end]
 * @return 路径长度
 */
int dijkstra(Graph g, int start, int end, int *path)
{
    //int result = g.matrix[start][end];
    int dis[g.N];
    int npath[g.N];
    int mark[g.N];//该节点是否已被标记
    for(int i = 0;i<g.N;i++)
    {
        dis[i] = g.matrix[start][i];
        mark[i] = 0;
        npath[i] = start;
    }
    mark[start] = 1;
    for(int i = 1;i<g.N;i++)
    {
        int min = 1000,c;
        for(int j = 0;j<g.N;j++)
        {
            if(mark[j] == 1)continue;
            if(dis[j]<min){
                min = dis[j];
                c = j;
            }
        }
        mark[c] = 1;
        for(int j = 0;j<g.N;j++)
        {
            if(dis[j]>dis[c]+g.matrix[c][j]){
                dis[j] = dis[c]+g.matrix[c][j];
                npath[j] = c;}

        }

    }
    int m = end;
    int s = 0;
    while(m!= start)
    {
        path[s] = m;
        m = npath[m];
        s++;
    }
    path[s] = start;
    int a[s+1];
   for(int k = 0;k<s+1;k++)
   {
       a[k] = path[k];
   }
   for(int k = 0;k<s+1;k++)
   {
       path[k] = a[s-k];
   }
    return dis[end];


}

//度
int getOutDegree(Graph g,int i){
    int degree=0;
    for(int j=0;j<g.N;j++){
        if(g.matrix[i][j]>0&&g.matrix[i][j]<max_dis){
            degree++;
        }
    }
    return degree;
}

int pos;
int getMaxCross(Graph g){
    int maxcross=0;
    for(int i=0;i<g.N;i++){
        if(maxcross<getOutDegree(g,i)){
            maxcross=getOutDegree(g,i);
            pos=i;
        }

    }
    return maxcross;
}

int main(){
    int vexnumber;     //总的顶点数
    int linenumber;    //记录路线的总数
    int start,end;//开始结束站点

    //输入路线模块
    scanf("%d",&vexnumber);
    Graph g = createGraph(vexnumber);
    scanf("%d",&linenumber);
    int i,j,length;
    int time,vex,vexnext;
    for(i = 0;i<linenumber;i++)     //构建每一条地铁线
    {
          scanf("%d",&length);
          scanf("%d %d\n",&vex,&time);    //将每一条边的信息输入到图中
          for(j = 1;j<length;j++)
          {
              scanf("%d %d\n",&vexnext,&time);
              g.matrix[vex][vexnext] = time;
              g.matrix[vexnext][vex] = time;
              vex = vexnext;
          }
    }


    //输入名字模块
    scanf("%d",&vexnumber);
    for(i = 0;i<vexnumber;i++)
    {
        scanf("%d",&vex);
        scanf("%s",g.vertex[i]);
    }
    scanf("%d",&start);
    scanf("%d",&end);
    if(isConnected(g)){
        printf("是连通图\n");
    }
    else{
        printf("不是连通图\n");
    }
    int maxCross;
    maxCross=getMaxCross(g);
    printf("%s %d条线路\n",g.vertex[pos],maxCross);
    int d = Diameter(g);
    printf("直径%d ", d);
    int r = Radius(g);
    printf("半径%d\n", r);
    int *short_path = (int *)malloc(sizeof(int) * g.N);
    int dis = dijkstra(g, start, end, short_path);

    if(start==end)  printf("%s到%s%d分钟 ",g.vertex[start],g.vertex[start],dis);
    else printf("%s到%s%d分钟 ",g.vertex[start],g.vertex[end],dis);
    printPath(dis, short_path, g);
    free(short_path);
    return 0;
}
